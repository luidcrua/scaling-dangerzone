// Generated by CoffeeScript 1.6.3
(function() {
  var NewUsuarioCtrl,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  NewUsuarioCtrl = (function(_super) {
    __extends(NewUsuarioCtrl, _super);

    NewUsuarioCtrl.prototype.events = {
      "tap button[data-action=save]": "onSave"
    };

    NewUsuarioCtrl.prototype.elements = {
      "#txt-nombre": "nombre",
      "#cb-sexo": "sexo",
      "#cb-ano": "ano",
      "#cb-mes": "mes",
      "#cb-dia": "dia",
      "#txt-email": "email",
      "#cb-ciudad": "ciudad",
      "#cb-nivAcademico": "nivAcademico"
    };

    function NewUsuarioCtrl() {
      this.bindUsuarioCreate = __bind(this.bindUsuarioCreate, this);
      this.onError = __bind(this.onError, this);
      NewUsuarioCtrl.__super__.constructor.apply(this, arguments);
      __Model.Usuario.bind("error", this.onError);
      __Model.Usuario.bind("create", this.bindUsuarioCreate);
    }

    NewUsuarioCtrl.prototype.onError = function() {
      return console.error(arguments);
    };

    NewUsuarioCtrl.prototype.bindUsuarioCreate = function(usuario) {
      return console.error("añadido el usuario", usuario);
    };

    NewUsuarioCtrl.prototype.onSave = function(event) {
      var imgUsuario;
      console.log(this.nombre.val(), this.sexo.val());
      /*
      		# Se realizan todas las validaciones
      			nombre: @nombre.val()
      			sexo: @sexo.val() # dropdown
      			edad: @edad.val() # Cambio por fechaNac
      			email: @email.val()
      			ciudad: @ciudad.val() # dropdown
      			nivAcademico: @nivAcademico.val() # dropdown
      */

      if (this.nombre.val() === "" || this.sexo.val() === "0" || this.email.val() === "" || this.ciudad.val() === "0" || this.nivAcademico.val() === "0") {
        Lungo.Notification.error("Error", "Todos los datos son obligatorios", "remove", 2);
      } else {
        if (/^\D*$/.test(this.nombre.val())) {
          if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(this.email.val())) {
            console.log("ADSA");
            imgUsuario = __Model.Usuario.findBy("id", 1003);
            if (imgUsuario === void 0) {
              imgUsuario = "";
            }
            $$.post('http://www.mukuralab.com/appmall/kumbia/json/registroUsu', {
              nombre: this.nombre.val(),
              email: this.email.val(),
              sexo: this.sexo.val(),
              fechaNac: this.ano.val() + "-" + this.mes.val() + "-" + this.dia.val(),
              ciudad: this.ciudad.val(),
              idNivelEstudio: this.nivAcademico.val(),
              imagen: imgUsuario.nombre,
              idFacebook: "",
              error: '1'
            }, function(data) {
              var usuarioObj;
              console.log(data);
              switch (data.idError) {
                case "0":
                case 0:
                  /*
                  									# VOLVER TODO A CEROOOOOOOOOO
                  									$$("#txt_nombre").val ""
                  									$$("#txt_cedula").val ""
                  									$$("#txt_telefono").val ""
                  									$$("#txt_celular").val ""
                  									$$("#txt_email_cliente").val ""
                  									$$("#txtar_observaciones").val ""
                  									$$("#cbTipoAsesoria").val "0"
                  									# Esconde el botón de siguiente
                  									$$("#btnSiguiente").hide()
                  									# Esconde la selección de tipo de asesoría
                  									$$("#liTipoAsesoria").children().first().hide()
                  									# Retira la selección del botón actual tanto de reporte como de servicio
                  									quitar = "activo_"
                  									poner = "inactivo_"
                  									__Model.Reporte.selectButton window.tipoReporteSeleccionado, quitar, poner
                  									__Model.Reporte.selectButton window.tipoServicioSeleccionado, quitar, poner
                  									window.tipoReporteSeleccionado = ""
                  									window.tipoServicioSeleccionado = ""
                  */

                  usuarioObj = {
                    idUsuario: "1",
                    nombre: $$("#txt-nombre").val()
                  };
                  Lungo.Data.Storage.persistent("userInfo", usuarioObj);
                  return Lungo.Notification.success("Reporte enviado", "Tu reporte fue enviado exitosamente", "ok", 2, function() {
                    return Lungo.Router.section("main");
                  });
                default:
                  return Lungo.Notification.error("Error", "Ocurrió un error, intenta nuevamente", "remove", 2);
              }
            });
            console.log("FOLLOW");
          } else {
            Lungo.Notification.error("Error", "El email debe tener la estructura xxxx@xxxx.xxx.", "remove", 2);
          }
        } else {
          Lungo.Notification.error("Error", "El nombre debe contener únicamente letras.", "remove", 2);
        }
      }
      __Model.Usuario.create({
        nombre: this.nombre.val(),
        sexo: this.sexo.val(),
        edad: this.edad.val(),
        email: this.email.val(),
        ciudad: this.ciudad.val(),
        nivAcademico: this.nivAcademico.val()
      });
      console.error(__Model.Usuario.all());
      Lungo.Router.section("noti");
      this.nombre.val("");
      this.sexo.val("");
      this.edad.val("");
      this.email.val("");
      this.ciudad.val("");
      return this.nivAcademico.val("");
    };

    return NewUsuarioCtrl;

  })(Monocle.Controller);

  __Controller.NewUsuario = new NewUsuarioCtrl("section#registro");

}).call(this);
